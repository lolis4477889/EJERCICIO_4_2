# -*- coding: utf-8 -*-
"""EJERCICIO2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1owz6qSgaLXJCz2wK0T7nZ4tPWrOm-xdW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Definimos la función a integrar
def f(x):
    return np.exp(-x**2)

# Implementación de la regla del trapecio
def trapezoidal_rule(a, b, n):
    x = np.linspace(a, b, n+1)  # Puntos equidistantes
    y = f(x)
    h = (b - a) / n
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])  # Regla del trapecio compuesta
    return integral, x, y

# Parámetros de integración
a, b = 1, 4  # Intervalo de integración
subintervalos = [5, 10, 15]  # Valores de n a evaluar

# Lista para almacenar resultados
datos = []

for n in subintervalos:
    integral_approx, x_vals, y_vals = trapezoidal_rule(a, b, n)
    datos.append([n, integral_approx])

    # Gráfica para cada n
    x_fine = np.linspace(a, b, 100)
    y_fine = f(x_fine)

    plt.figure(figsize=(8, 5))
    plt.plot(x_fine, y_fine, 'r-', label=r'$f(x) = e^{-x^2}$', linewidth=2)
    plt.fill_between(x_vals, y_vals, alpha=0.3, color='blue', label="Aproximación Trapecios")
    plt.plot(x_vals, y_vals, 'bo-', label="Puntos de integración")
    plt.xlabel("$x$")
    plt.ylabel("$f(x)$")
    plt.title(f"Aproximación de la integral con la regla del trapecio (n={n})")
    plt.legend()
    plt.grid()
    plt.savefig(f"trapecio_n{n}.png")
    plt.show()

# Crear DataFrame y exportar a Excel
df = pd.DataFrame(datos, columns=["Subintervalos (n)", "Integral Aproximada"])
df.to_excel("resultados_trapecio.xlsx", index=False)

print("Cálculos completados. Los resultados se han guardado en 'resultados_trapecio.xlsx'.")